<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【Spring MVC】关于RESTful规范支持问题]]></title>
    <url>%2F2018%2F10%2F22%2FSpringMVC_RESTful%2F</url>
    <content type="text"><![CDATA[RESTful风格之文件上传使用PUT方法提交修改操作提交form表单到RESTful风格的URL地址时，由于form表单只有GET和POST两种提交方法，需要在form中埋一个hidden的input标签，如：1&lt;input type="hidden" name="_method" value="PUT"/&gt; 然后form表单设置method提交方式为POST 为了让Spring MVC支持form表单hidden方法提交的RESTful风格，需要在web.xml中配置一个filter过滤器HiddenHttpMethodFilter 当提交表单含有“文件上传”，即表单属性enctype=”multipart/form-data”时，还需要在该过滤器前配置一个MultipartFilter过滤器，然后需要将Spring MVC的文件上传解析器CommonsMultipartResolver配置在contextConfigLocation对应的上下文配置中（而不能配置在DispatcherServlet的上下文中，因为。。。）此时，Spring MVC就可以解析带文件上传的PUT请求了，即能够将请求映射到对应URL且为PUT方式的Handler RESTful风格之数据绑定注解@PathVariable当Spring MVC使用RESTful风格的URL地址时，例如：value=”/ad/{id}” 如果使用Java基本类型（或其包装类）作为接收数据的参数，则需要加上注解@PathVariable，例如：@PathVariable(“id”)Long id 如果使用自定义类作为接收参数，则无需加注解，因为Spring MVC可以通过“Java反射”得到自定义类的属性名，从而完成数据绑定~ 注解@RequestParam当Spring MVC接收普通表单值时（非RESTful风格参数） 如果使用Java基本类型（或其包装类）作为接收数据的参数，则需要加上注解@RequestParam，例如：@RequestParam(“id”)Long id 否则，当关闭调试器的添加变量属性到生成的class文件中（即编译时不生成调试信息到class文件中）时，而调试信息包括参数的变量名，此时参数无法接收数据。当将工程发布到线上服务器时，有可能因为编译的问题，导致未加此注解的参数出问题~ 如果使用自定义类作为接收参数，则无需加注解，同理~~]]></content>
      <categories>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>RESTful</tag>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Maven】笔记]]></title>
    <url>%2F2018%2F06%2F20%2FMaven_note%2F</url>
    <content type="text"><![CDATA[常用命令1.清理：mvn clean将项目根目录下的target目录清理掉 2.编译：mvn compile将项目中.java文件编译为.class文件 3.单元测试：mvn test单元测试类名要求为：XxxTest.java将项目中src\test\java目录下的单元测试类都执行测试 4.打包：mvn packageJava Project –&gt;jar包Web Project –&gt;war包将项目打包到项目根目录下的target目录 5.安装：mvn install将项目package打包到本地仓库 6.运行web项目：mvn tomcat:run 生命周期在maven中存在三套生命周期，每一套生命周期相互独立，互不影响。 在一套生命周期内，执行后面的命令时前面的命令都会按顺序自动执行。 CleanLifeCycle:清理生命周期 clean DefaultLifeCycle:默认生命周期 compile、test、package、install、deploy SiteLifeCycle:站点生命周期 site 依赖范围使用到tomcat自带的jar包，需将项目中依赖作用范围设置为：provided——编译、测试时有效，运行时无效。 例如：servlet-api、jsp-api Debug调试调试时需要关联源码，否则导致断点无法进入 私服仓库类型hosted：宿主仓库存放本公司开发的jar包（正式版、测试版、第三方如Oracle等存在版权问题的） proxy：代理仓库代理中央仓库，Apache下测试版本的jar包 group：组仓库包含hosted宿主仓库、proxy代理仓库（开发时连接group组仓库）]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Spring MVC】笔记]]></title>
    <url>%2F2018%2F06%2F12%2FSpringMVC_note%2F</url>
    <content type="text"><![CDATA[Spring MVC和Struts2的区别1、Spring MVC基于方法开发，Struts2基于类开发 2、Spring MVC：可以使用–&gt;单例模式（建议使用单例开发）。因为基于方法开发的，通过形参接收参数，方法执行结束，形参数据销毁 3、Struts2：无法使用单例，只能使用多例开发。因为基于类开发的，通过类的成员变量接收参数 4、Spring MVC的controller开发更趋近于service开发，是因为基于方法开发的 5、Struts2速度慢在于使用struts标签，如果使用Struts2建议使用jstl Spring MVC配置1、当在web.xml中使用了DispatcherServlet截获所有请求url时，在引入静态文件，例如js时，需要加入&lt;mvc:default-servlet-handler/&gt; 从而使用默认的Servlet来响应静态文件。如果没有加入该配置，则执行时页面会报404错误。 数据校验由于Validation框架通过硬编码完成数据校验，因此现代开发推荐使用JSR 303完成数据校验 拦截器Interceptor拦截器主要作用是拦截用户的请求并进行相应的处理，应用中每个控制器都需要重复执行的通用操作，比如：用户权限验证、判断用户是否登录等。 1、通过request.getServletPath()获取请求路径进行判断是否需要拦截 2、也可以在DispatcherServlet的上下文中的&lt;mvc:interceptor&gt;中配置&lt;mvc:exclude-mapping path=””/&gt;以忽略请求路径]]></content>
      <categories>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【MyBatis】笔记]]></title>
    <url>%2F2018%2F06%2F01%2FMyBatis_note%2F</url>
    <content type="text"><![CDATA[实体类pojo属性类型1、在实体类中不要使用基本类型，如果用类似int基本类型，在传递给后台的时候，会传入默认值0，对sql的查询有影响 2、pojo属性应使用包装类，因为包装类的默认值为null 3、表的主键字段应该用Long pojo属性列名关系一对多–&gt;List集合 多对一–&gt;id外键，引用id外键pojo对象 一对多XML配置：一对多所关联的集合对象，一般设置成lazy延迟加载 在实际开发中，一对多关系通常映射为集合对象，而由于多方的数据量可能很大，所以通常使用延迟加载； 而多对一关系只是关联到一个对象，所以通常使用多表连接直接把数据提取出来 延迟加载和Spring集成时，要确保只能在Service层调用延迟加载的属性。 当结果从Service层返回至Controller层时，此时已超出SqlSession生命周期，如果获取延迟加载的属性值，会因为SqlSession已经关闭而抛出异常。 延迟加载需在mybatis-config.xml中配置以下两个属性1234&lt;settings&gt; &lt;setting name="lazyLoadingEnabled" value="true"/&gt; &lt;setting name="aggressiveLazyLoading" value="false"/&gt;&lt;/settings&gt; resultMapJavaType用来指定pojo中属性的类型，ofType指定的是映射到list集合属性中pojo的类型 当多表查询返回的结果集中有同名列如id时，resultMap中column属性若为id，则MyBatis会默认使用查询出的第一个id列。为了区分，最好给列取一个别名。 缓存机制MyBatis的缓存机制是基于id进行缓存的。在一级缓存，SqlSession对象中有一个HashMap用于存储缓存数据，HashMap的key对应对象的id，value值保存对象。 一级缓存是SqlSession级别的，默认开启； 二级缓存是mapper级别的，多个SqlSession共享，其作用域是mapper的同一个namespace，根据不同的mapper有不同的namespace来区分； MyBatis和Spring整合后：1、依赖注入框架Spring可以创建线程安全的SqlSession 2、在【非事务】场景下执行时，一级缓存会失效。因为每次调用完mapper的方法都会关闭SqlSession 3、在开启事务控制的Service中执行时，一级缓存有效。当事务提交后，即Service方法结束时，SqlSession才关闭。因此在Service方法中共用一个SqlSession 二级缓存的应用场景对于访问多的查询请求且用户对查询结果实时性要求不高，此时可采用MyBatis二级缓存技术降低数据库访问量，提高访问速度。 例如：耗时较高的统计分析SQL、电话账单查询SQL 实现方法：通过设置刷新间隔时间，由MyBatis每隔一段时间自动清空缓存，根据数据变化频率设置缓存刷新间隔flushInterval 比如设置为30分钟、60分钟、24小时等 二级缓存的局限性比如对商品信息进行缓存，当只需修改一个或部分商品信息时，所有商品信息的缓存数据都会被清空。 解决此类问题：需要在业务层根据需求对数据针对性缓存 应避免使用二级缓存，参考博客]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Java】反编译工具——JD-GUI]]></title>
    <url>%2F2018%2F05%2F14%2Fjava_JD-GUI%2F</url>
    <content type="text"><![CDATA[最近因为有反编译class文件的需求，接触了一些Java反编译工具，并且对比了各大反编译工具，感觉最好用的是JD-GUI，支持直接反编译jar包，而且开源免费。 官网：http://jd.benow.caGitHub：https://github.com/java-decompiler下载：https://github.com/java-decompiler/jd-gui/releases]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>反编译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Java】try和finally中的return]]></title>
    <url>%2F2018%2F05%2F14%2Fjava_try_finally_return%2F</url>
    <content type="text"><![CDATA[当try语句结束时总会执行finally语句。这确保即使发生了一个意想不到的异常也会执行finally语句。finally的用处不仅是用来处理异常——它可以让程序员不会因为return、continue、或break语句而忽略了清理代码。把清理代码放在finally语句块里是个很好的做法，即便不会有异常发生也要这样做。 注意，当try或者catch的代码在运行的时候，JVM退出了。那么finally语句块就不会执行。同样，如果线程在运行try或者catch的代码时被中断了或者被killed，那么finally语句可能也不会执行了，即使整个运用还会继续执行。 如果try语句里有return，那么代码的行为如下：1.如果有返回值，就把返回值保存到局部变量中2.执行jsr指令跳到finally语句里执行3.执行完finally语句后，返回之前保存在局部变量表里的值 示例代码：12345678910111213141516171819class Test &#123; public int test() &#123; int x = 1; try &#123; return ++x; &#125; catch (Exception e) &#123; &#125; finally &#123; ++x; &#125; return x; &#125; public static void main(String[] args) &#123; Test t = new Test(); System.out.println(t.test()); &#125;&#125; 输出结果为2]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>return</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Java】Parameter和Attribute]]></title>
    <url>%2F2018%2F05%2F10%2Fjava_Parameter_Attribute%2F</url>
    <content type="text"><![CDATA[参数（Parameter）是由客户端（浏览器）提供，使用request.getParameter()读取，值只能读取不能修改，数据类型为String类型，因此客户端的参数值只能是简单类型的，而不能是复杂类型的，比如一个对象 属性（Attribute）是由服务器端（JSP或者Servlet）利用request.setAttribute()设置，值可以读取也可以修改，使用request.getAttribute()读取，值可以是任意一个Object类型的，即可以传对象]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Parameter</tag>
        <tag>Attribute</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Java】标签@Override的作用]]></title>
    <url>%2F2018%2F05%2F08%2Fjava_%40Override%2F</url>
    <content type="text"><![CDATA[@Override是伪代码，可写可不写，它表示方法重写，作用如下： 1．可以当注释用，方便阅读2．标注这是方法的复写3．编译时编译器会验证@Override下面的方法名是否是父类中的，不是则报错]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[【Java】extends和implements]]></title>
    <url>%2F2018%2F05%2F08%2Fjava_extends_implements%2F</url>
    <content type="text"><![CDATA[extends 是继承某一个类，继承后可以使用、重写父类的方法1class A extends B; implements 是实现多个接口，接口的方法一般为空，需重写才能使用12class A implements B;class A implements B,C,D;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>extends</tag>
        <tag>implements</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Win】注册表启动项]]></title>
    <url>%2F2018%2F05%2F08%2Fwin_run%2F</url>
    <content type="text"><![CDATA[对所有用户HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run 对当前用户HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Win】远程桌面设置多用户同时登录]]></title>
    <url>%2F2018%2F05%2F01%2Fwin_mstsc_multiuser%2F</url>
    <content type="text"><![CDATA[1、Win+R运行gpedit.msc，打开组策略 2、依次展开：计算机配置——管理模板——Windows组件——远程桌面服务——远程桌面会话主机——连接，设置“限制连接的数量” 3、再找到“将远程桌面服务用户限制到单独的远程桌面服务会话”，设置为已禁用 4、下载一个解除远程桌面多用户连接限制补丁Universal Termsrv Patch]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>远程桌面</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Win】远程桌面设置不使用密码登录]]></title>
    <url>%2F2018%2F05%2F01%2Fwin_mstsc_null%2F</url>
    <content type="text"><![CDATA[1、Win+R运行gpedit.msc，打开组策略 2、依次展开：计算机配置——WINDOWS设置——安全设置——本地策略——安全选项 3、右侧找到“账户：使用空密码的本地账户只允许进行控制台登录”，设置为“禁用”]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>远程桌面</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Win】7/8/10隐藏登录界面用户]]></title>
    <url>%2F2018%2F05%2F01%2Fwin_loginhide%2F</url>
    <content type="text"><![CDATA[1、Win+R运行regedit，打开注册表编辑器 2、定位到：HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon 3、在Winlogon右键新建“项”，命名为SpecialAccounts 4、在SpecialAccounts右键新建“项”，命名为UserList 5、在UserList右键新建DWORD（32位）值，命名为用户名，数值数据为0]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
</search>
